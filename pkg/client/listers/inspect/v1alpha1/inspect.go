/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/myoperator/inspectoperator/pkg/apis/inspect/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InspectLister helps list Inspects.
// All objects returned here must be treated as read-only.
type InspectLister interface {
	// List lists all Inspects in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Inspect, err error)
	// Inspects returns an object that can list and get Inspects.
	Inspects(namespace string) InspectNamespaceLister
	InspectListerExpansion
}

// inspectLister implements the InspectLister interface.
type inspectLister struct {
	indexer cache.Indexer
}

// NewInspectLister returns a new InspectLister.
func NewInspectLister(indexer cache.Indexer) InspectLister {
	return &inspectLister{indexer: indexer}
}

// List lists all Inspects in the indexer.
func (s *inspectLister) List(selector labels.Selector) (ret []*v1alpha1.Inspect, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Inspect))
	})
	return ret, err
}

// Inspects returns an object that can list and get Inspects.
func (s *inspectLister) Inspects(namespace string) InspectNamespaceLister {
	return inspectNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InspectNamespaceLister helps list and get Inspects.
// All objects returned here must be treated as read-only.
type InspectNamespaceLister interface {
	// List lists all Inspects in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Inspect, err error)
	// Get retrieves the Inspect from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Inspect, error)
	InspectNamespaceListerExpansion
}

// inspectNamespaceLister implements the InspectNamespaceLister
// interface.
type inspectNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Inspects in the indexer for a given namespace.
func (s inspectNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Inspect, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Inspect))
	})
	return ret, err
}

// Get retrieves the Inspect from the indexer for a given namespace and name.
func (s inspectNamespaceLister) Get(name string) (*v1alpha1.Inspect, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("inspect"), name)
	}
	return obj.(*v1alpha1.Inspect), nil
}
